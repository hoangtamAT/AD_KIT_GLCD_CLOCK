/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 10/26/2017
Author  : 
Company : 
Comments: 


Chip type               : ATmega8
Program type            : Application
AVR Core Clock frequency: 4.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*******************************************************/

#include <mega8.h>
#include <i2c.h>
#include <ds1307.h>
#include <1wire.h>
#include <ds18b20.h>
#include <glcd.h>
#include <font5x7.h>
#include <fontnumber8x13.h>
//#include <stdio.h>
//#include "LCD/moon.h"
//#include "LCD/sun.h"
//#include "LCD/alarm_on.h"
//#include "LCD/alarm_off.h"

#define UP      PIND.1
#define DOWN    PIND.0
bit blink,flash_sec;
char hour,minn,sec,day,date,month,year;
unsigned char mode,time,time1;
char *T=0;
eeprom unsigned char min_set,hour_set,alarm;   

void timer0_init()
{
TCCR0=(0<<CS02) | (1<<CS01) | (0<<CS00);
TCNT0=0x00;
TIMSK=1<<TOIE0;
}
void timer0_stop()
{
  TCCR0=0; 
  TIMSK=0<<TOIE0;
}

// Declare your global variables here

// External Interrupt 0 service routine
interrupt [EXT_INT0] void ext_int0_isr(void)
{
    //OK 
    rtc_set_time(hour,minn,sec);
    rtc_set_date(day,date,month,year);
    timer0_stop();
    mode=0;
}

// External Interrupt 1 service routine
interrupt [EXT_INT1] void ext_int1_isr(void)
{   
    //MODE 
    mode++;
    if(mode>8) mode=0;
}

// Timer 0 overflow interrupt service routine
interrupt [TIM0_OVF] void timer0_ovf_isr(void)
{
    //0.512ms
    time++;
    if(time>50) 
    {
      blink=~blink;
      time=0;
    }
}

// Timer1 overflow interrupt service routine
interrupt [TIM1_OVF] void timer1_ovf_isr(void)
{   //0.13s
    time1++;
    if(time>4)
    {  
        time1=0;
        flash_sec=~flash_sec;
    }
    
}
void tempDisplay(unsigned char x, unsigned char y)
{
  float temp; 
  unsigned int nhietdo;
  temp=ds18b20_temperature(T);
  nhietdo=temp*10;
  glcd_setfont(font5x7);
  glcd_putcharxy(x,y,48+nhietdo/100);
  glcd_putchar(48+(nhietdo/10)%10);
  glcd_outtext(".");
  glcd_putchar(48+(nhietdo%100)%10);
  glcd_outtextxy(x+24,y,"o");
  glcd_outtextxy(x+30,y+3,"C");
}

void getTime()
{
    rtc_get_time(&hour,&minn,&sec);
    rtc_get_date(&day,&date,&month,&year);
}
void timeDisplay(unsigned char x, unsigned char y)
{
  glcd_setfont(fontNumber);
  glcd_putcharxy(x,y,48+(hour/10)); 
  glcd_putchar(48+(hour%10)); 
  glcd_outtext(":");
  glcd_putchar(48+(minn/10)); 
  glcd_putchar(48+(minn%10)); 
 
  if(mode==2 && blink%2==0)
  { 
    glcd_setfont(fontNumber);
    glcd_outtextxy(x,y,".."); 
  } 
  if(mode==1 && blink%2==0)
  { 
    glcd_setfont(fontNumber);
    glcd_outtextxy(x+27,y,".."); 
  }
  if(mode==0 && flash_sec%2==0)
  {
    glcd_setfont(fontNumber);
    glcd_outtextxy(x+18,y,".");
  }
}
/*
void dayDisplay(unsigned char x, unsigned char y)
{ int C;
switch (month)
             {
             case 1: C=date;
                     break;
             case 2: C=31+date;
                     break;
             case 3: if(year%4==0) C=60+date;
                     else C=59+date;
                     break;
             case 4: if((year%4)==0) C=91+date;
                     else C=90+date;
                     break;
             case 5: if((year%4)==0) C=121+date;
                     else C=120+date;
                     break;
             case 6: if((year%4)==0) C=152+date;
                     else C=151+date;
                     break;
             case 7: if((year%4)==0) C=182+date;
                     else C=181+date;
                     break;
             case 8: if((year%4)==0) C=213+date;
                     else C=212+date;
                     break;
             case 9: if((year%4)==0) C=244+date;
                     else C=243+date;
                     break;
             case 10:if((year%4)==0) C=274+date;
                     else C=273+date;
                     break;
             case 11:if((year%4)==0) C=305+date;
                     else C=304+date;
                     break;
             case 12:if((year%4)==0) C=335+date;
                     else C=334+date;
                     break;
             default:
             }
             //glcd_setfont(font5x7);
             //cong thuc tinh thu:
            // n=((years-1)+((years-1)/4)-((years-1)/100)+((years-1)/400)+C)%7
            // n: thu trong tuan (0=CN;1=T2.....6=t7)
            // C: ngay thu bao nhieu tu dau nam den hien tai
 switch(((2000+year-1)+((2000+year-1)/4)-((2000+year-1)/100)+((2000+year-1)/400)+C)%7)
            {
                case 0: glcd_outtextxy(x,y,"CN-"); break;
                case 1: glcd_outtextxy(x,y,"T2-"); break;
                case 2: glcd_outtextxy(x,y,"T3-"); break;
                case 3: glcd_outtextxy(x,y,"T4-"); break;
                case 4: glcd_outtextxy(x,y,"T5-"); break;
                case 5: glcd_outtextxy(x,y,"T6-"); break;
                case 6: glcd_outtextxy(x,y,"T7-"); break;
                default:
            }
}
*/
void dateDisplay(unsigned char x, unsigned char y)
{
  glcd_setfont(font5x7); 
  //dayDisplay(x,y);
  glcd_putcharxy(x,y,48+(date/10)); 
  glcd_putchar(48+(date%10)); 
  glcd_outtext("/");
  glcd_putchar(48+(month/10)); 
  glcd_putchar(48+(month%10)); 
  glcd_outtext("/");
  glcd_putchar(48+(year/10)); 
  glcd_putchar(48+(year%10));
  
  if(blink%2==0 && mode==3)
  {
    glcd_outtextxy(x+18,y,"  "); 
  } 
  if(blink%2==0 && mode==4)
  {
    glcd_outtextxy(x+36,y,"  "); 
  }
  if(blink%2==0 && mode==5)
  {
    glcd_outtextxy(x+54,y,"  "); 
  }
}
void alarmDisplay(unsigned char x, unsigned char y)
{
   glcd_setfont(font5x7);
   glcd_putcharxy(x+10,y+1,48+hour_set/10);
   glcd_putchar(48+hour_set%10);
   glcd_outtext(":");
   glcd_putchar(48+min_set/10); 
   glcd_putchar(48+min_set%10);   
   
   if(mode==6 && blink==1)
   {
     glcd_setfont(font5x7);
     glcd_outtextxy(x+28,y+1,"  ");
   } 
   if(mode==7 && blink==1)
   {
     glcd_setfont(font5x7);
     glcd_outtextxy(x+10,y+1,"  ");
   } 
   if(mode==8 && blink==1)
   {
     glcd_setfont(font5x7);
     glcd_outtextxy(x-3,y,"  "); 
   } 
}
/*
void so_ngay(void)
{
  if(month==2)     // thang 2 nam nhuan co 29 ngay, nam thuong co 28 ngay
  {
   if(year%4==0)   //&&year%100!=0||year%400==0)
   {
    No_date=29;
   }
   else
   {
    No_date=28;
   };
  }

  else
  {
   if(month==4||month==6||month==9||month==11)
   {
    No_date=30;
   }

   else
   {
    if(month==1||month==3||month==5||month==7||month==8||month==10||month==12)
    {
     No_date=31;
    }
   };
  };

}
*/
void setting(void)
{
 //so_ngay();
//================================================
 if(mode==1)   //chinh phut
 {
   if(UP==0)  // phim "UP" nhan
        {
        if(minn==59)
            {
            minn=0;
            }
        else
            {
            minn++;
            };
        while(!UP); // doi nha phim
        }
   //==============
   if(DOWN==0)        // phim "DOWN" nhan
        {
        if(minn==0)
            {
            minn=59;
            }
        else
            {
            minn--;
            };
        while(!DOWN);
        }
 }
 //===============================
  if(mode==2)   //chinh gio
    {
   if(UP==0)  // phim "UP" nhan
        {
        if(hour==23)
            {
            hour=0;
            }
        else
            {
            hour++;
            };
        while(!UP); // doi nha phim
        }
   //==============
   if(DOWN==0)        // phim "DOWN" nhan
        {
        if(hour==0)
            {
            hour=23;
            }
        else
            {
            hour--;
            };
        while(!DOWN);
        }
    }
 //===============================
 if(mode==3) //chinh ngay
    {
    //================================
    if(UP==0) // phim "UP" nhan
        {
        if(date==31)
            {
            date=1;
            }
        else
            {
            date++;
            };
        while(!UP);
        }
    //=========================================
    if(DOWN==0)        // phim "DOWN" nhan
        {

        if(date==1)
            {
            date=31;
            }
        else
            {
            date--;
            };
        while(!DOWN);
        }
    }
 //================================================
    if(mode==4)  //chinh thang
    {
        //==================================
    if(UP==0)
        {
        if(month==12)
            {
            month=1;
            }
        else
            {
            month++;
            };
        while(!UP);                                       // bao co phim nhan
        }
/////////////////////////////////////////////////////////////
    if(DOWN==0)
        {
        if(month==1)
            {
            month=12;
            }
        else
            {
            month--;
            };
        while(!DOWN);
        }
    }
    //=================================
    if(mode==5) //chinh nam
    {
    if(UP==0)
        {
        if(year==99)
            {
            year=0;
            }
        else
            {
            year++;
            };
        while(!UP);
        }
///////////////////////////////////////////////////////////////
    if(DOWN==0)
        {
        if(year==00)
            {
            year=99;
            }
        else
            {
            year--;
            };
        while(!DOWN);
        }
    }
//====================
if(mode==6)   //chinh phut bao thuc
 {
   if(UP==0)  // phim "UP" nhan
        {
        if(min_set==59)
            {
            min_set=0;
            }
        else
            {
            min_set++;
            };
        while(!UP); // doi nha phim
        }
   //==============
   if(DOWN==0)        // phim "DOWN" nhan
        {
        if(min_set==0)
            {
            min_set=59;
            }
        else
            {
            min_set--;
            };
        while(!DOWN);
        }
 }
 //===============================
  if(mode==7)   //chinh gio bao thuc
    {
   if(UP==0)  // phim "UP" nhan
        {
        if(hour_set==23)
            {
            hour_set=0;
            }
        else
            {
            hour_set++;
            };
        while(!UP); // doi nha phim
        }
   //==============
   if(DOWN==0)        // phim "DOWN" nhan
        {
        if(hour_set==0)
            {
            hour_set=23;
            }
        else
            {
            hour_set--;
            };
        while(!DOWN);
        }
    }
  //===================
  if(mode==8)   //chon on/off bao thuc
  { 
//    if(alarm==1) glcd_putimage(43,52,alarm_on,GLCD_PUTCOPY);
//    else glcd_putimage(43,52,alarm_off,GLCD_PUTCOPY);
    if(UP==0)
    {
     alarm++;
     if(alarm==2) alarm=0;
    }
    if(DOWN==0)
    {
     alarm--;
     if(alarm==0) alarm=1;
    }
  }

}


void main(void)
{
// Declare your local variables here
// Variable used to store graphic display
// controller initialization data
GLCDINIT_t glcd_init_data;

// Input/Output Ports initialization
// Port B initialization
// Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
// State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=In 
DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (1<<DDC1) | (0<<DDC0);
// State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=T 
PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=T Bit3=P Bit2=P Bit1=P Bit0=P 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: 500.000 kHz
TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 500.000 kHz
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer Period: 0.13107 s
// Timer1 Overflow Interrupt: On
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (1<<TOIE0);

// External Interrupt(s) initialization
// INT0: On
// INT0 Mode: Falling Edge
// INT1: On
// INT1 Mode: Falling Edge
GICR|=(1<<INT1) | (1<<INT0);
MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
GIFR=(1<<INTF1) | (1<<INTF0);


// Bit-Banged I2C Bus initialization
// I2C Port: PORTC
// I2C SDA bit: 4
// I2C SCL bit: 5
// Bit Rate: 100 kHz
// Note: I2C settings are specified in the
// Project|Configure|C Compiler|Libraries|I2C menu.
i2c_init();

// DS1307 Real Time Clock initialization
// Square wave output on pin SQW/OUT: Off
// SQW/OUT pin state: 0
rtc_init(0,0,0);

// 1 Wire Bus initialization
// 1 Wire Data port: PORTC
// 1 Wire Data bit: 2
// Note: 1 Wire port settings are specified in the
// Project|Configure|C Compiler|Libraries|1 Wire menu.
w1_init();

// Graphic Display Controller initialization
// The ST7920 connections are specified in the
// Project|Configure|C Compiler|Libraries|Graphic Display menu:
// E - PORTD Bit 7
// R /W - PORTD Bit 6
// RS - PORTD Bit 5
// /RST - PORTB Bit 4
// DB4 - PORTB Bit 0
// DB5 - PORTB Bit 1
// DB6 - PORTB Bit 2
// DB7 - PORTB Bit 3

// Specify the current font for displaying text
glcd_init_data.font=font5x7;
// No function is used for reading
// image data from external memory
glcd_init_data.readxmem=NULL;
// No function is used for writing
// image data to external memory
glcd_init_data.writexmem=NULL;

glcd_init(&glcd_init_data);

// Global enable interrupts

#asm("sei")
//glcd_rectangle(0,0,127,63);
glcd_line(5,17,122,17);
glcd_line(5,47,122,47);  
if(alarm==255)
{
  alarm=0;
  min_set=0;
  hour_set=0;
}
ds18b20_init(T,0,0,DS18B20_10BIT_RES);
while (1)
      {
        timeDisplay(42,20);
        dateDisplay(31,37); 
        alarmDisplay(43,52);
        if(mode==0)
        { 
        getTime();
        tempDisplay(70,2); 
//         if(hour==6) glcd_putimage(57,2,sun,GLCD_PUTCOPY); 
//         if(hour==18) glcd_putimage(57,2,moon,GLCD_PUTCOPY);
        } 
        else
        {
          timer0_init();
          setting();  
        }

      }
}
